[
  {
    "path": "prepro/PrePro1_Demo_Datentypen/",
    "title": "Demo Datentypen",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-10-18",
    "categories": [
      "PrePro1"
    ],
    "contents": "\n\nContents\nDatentypen\nData Frames und Conveniance Variabeln\n\n\nR-Code\n\nDatentypen\nNumerics\nUnter die Kategorie numeric fallen in R zwei Datentypen:\ndouble: Gleitkommazahl (z.B. 10.3, 7.3)\ninteger: Ganzzahl (z.B. 10, 7)\nDoubles\nFolgendermassen wird eine Gleitkommazahl einer Variabel zuweisen:\n\n\nx <- 10.3\n\nx\n\n\n[1] 10.3\n\ntypeof(x)\n\n\n[1] \"double\"\n\nStatt <-kann auch = verwendet werden. Dies funktioniert aber nicht in allen Situationen, und ist zudem leicht mit == zu verwechseln.\n\n\ny = 7.3\n\ny\n\n\n[1] 7.3\n\nOhne explizite Zuweisung nimmt R immer den Datentyp doublean:\n\n\nz <- 42\ntypeof(z)\n\n\n[1] \"double\"\n\nis.integer(z)\n\n\n[1] FALSE\n\nis.numeric(z)\n\n\n[1] TRUE\n\nis.double(z)\n\n\n[1] TRUE\n\nGanzzahl / Integer\nErst wenn man eine Zahl explizit als integer definiert (mit as.integer() oder L), wird sie auch als solches abgespeichert.\n\n\na <- as.integer(z)\nis.numeric(a)\n\n\n[1] TRUE\n\nis.integer(a)\n\n\n[1] TRUE\n\nc <- 8L\nis.numeric(c)\n\n\n[1] TRUE\n\nis.integer(c)\n\n\n[1] TRUE\n\n\n\ntypeof(a)\n\n\n[1] \"integer\"\n\nis.numeric(a)\n\n\n[1] TRUE\n\nis.integer(a)\n\n\n[1] TRUE\n\nMit c() können eine Reihe von Werten in einer Variabel zugewiesen werden (als vector). Es gibt zudem auch character vectors.\n\n\nvector <- c(10,20,33,42,54,66,77)\nvector\n\n\n[1] 10 20 33 42 54 66 77\n\nvector[5]\n\n\n[1] 54\n\nvector[2:4]\n\n\n[1] 20 33 42\n\nvector2 <- vector[2:4]\n\n\n\nEine Ganzzahl kann explizit mit as.integer() definiert werden.\n\n\na <- as.integer(7)\nb <- as.integer(3.14)\na\n\n\n[1] 7\n\nb\n\n\n[1] 3\n\ntypeof(a)\n\n\n[1] \"integer\"\n\ntypeof(b)\n\n\n[1] \"integer\"\n\nis.integer(a)\n\n\n[1] TRUE\n\nis.integer(b)\n\n\n[1] TRUE\n\nEine Zeichenkette kann als Zahl eingelesen werden.\n\n\nc <- as.integer(\"3.14\")\nc\n\n\n[1] 3\n\ntypeof(c)\n\n\n[1] \"integer\"\n\nLogische Abfragen\nWird auch auch als boolesch (Eng. boolean) bezeichnet.\n\n\ne <- 3\nf <- 6\ng <- e > f\ne\n\n\n[1] 3\n\nf\n\n\n[1] 6\n\ng\n\n\n[1] FALSE\n\ntypeof(g)\n\n\n[1] \"logical\"\n\nLogische Operationen\n\n\nsonnig <- TRUE\ntrocken <- FALSE\n\nsonnig & !trocken\n\n\n[1] TRUE\n\nOft braucht man auch das Gegenteil / die Negation eines Wertes. Dies wird mittels ! erreicht\n\n\nu <- TRUE\nv <- !u \nv\n\n\n[1] FALSE\n\nZeichenketten\nZeichenketten (Eng. character) stellen Text dar\n\n\ns <- as.character(3.14)\ns\n\n\n[1] \"3.14\"\n\ntypeof(s)\n\n\n[1] \"character\"\n\nZeichenketten verbinden / zusammenfügen (Eng. concatenate)\n\n\nfname <- \"Hans\"\nlname <- \"Muster\"\npaste(fname,lname)\n\n\n[1] \"Hans Muster\"\n\nfname2 <- \"hans\"\nfname == fname2\n\n\n[1] FALSE\n\nFactors\nMit Factors wird in R eine Sammlung von Zeichenketten bezeichnet, die sich wiederholen, z.B. Wochentage (es gibt nur 7 unterschiedliche Werte für “Wochentage”).\n\n\nwochentage <- c(\"Donnerstag\",\"Freitag\",\"Samstag\",\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\n                \"Donnerstag\",\"Freitag\",\"Samstag\",\"Sonntag\", \"Montag\",\"Dienstag\",\"Mittwoch\")\n\ntypeof(wochentage)\n\n\n[1] \"character\"\n\nwochentage_fac <- as.factor(wochentage)\n\nwochentage\n\n\n [1] \"Donnerstag\" \"Freitag\"    \"Samstag\"    \"Sonntag\"    \"Montag\"    \n [6] \"Dienstag\"   \"Mittwoch\"   \"Donnerstag\" \"Freitag\"    \"Samstag\"   \n[11] \"Sonntag\"    \"Montag\"     \"Dienstag\"   \"Mittwoch\"  \n\nwochentage_fac\n\n\n [1] Donnerstag Freitag    Samstag    Sonntag    Montag     Dienstag  \n [7] Mittwoch   Donnerstag Freitag    Samstag    Sonntag    Montag    \n[13] Dienstag   Mittwoch  \n7 Levels: Dienstag Donnerstag Freitag Mittwoch Montag ... Sonntag\n\nWie man oben sieht, unterscheiden sich character vectors und factors v.a. dadurch, dass letztere über sogenannte levels verfügt. Diese levels entsprechen den Eindeutigen (unique) Werten.\n\n\nlevels(wochentage_fac)\n\n\n[1] \"Dienstag\"   \"Donnerstag\" \"Freitag\"    \"Mittwoch\"   \"Montag\"    \n[6] \"Samstag\"    \"Sonntag\"   \n\nunique(wochentage)\n\n\n[1] \"Donnerstag\" \"Freitag\"    \"Samstag\"    \"Sonntag\"    \"Montag\"    \n[6] \"Dienstag\"   \"Mittwoch\"  \n\nZudem ist fällt auf, dass die Reihenfolge der Wohentag alphabetisch sortiert ist. Wie diese sortiert werden zeigen wir an einem anderen Beispiel:\n\n\nzahlen <- factor(c(\"null\",\"eins\",\"zwei\",\"drei\"))\n\nzahlen\n\n\n[1] null eins zwei drei\nLevels: drei eins null zwei\n\nOffensichtlich sollten diese factors geordnet sein, R weiss davon aber nichts. Eine Ordnung kann man mit dem Befehl ordered = T festlegen.\nBeachtet: ordered = T kann nur bei der Funktion factor() spezifiziert werden, nicht bei as.factor(). Ansonsten sind factor() und as.factor() sehr ähnlich.\n\n\nzahlen <- factor(zahlen,ordered = TRUE)\n\nzahlen\n\n\n[1] null eins zwei drei\nLevels: drei < eins < null < zwei\n\nBeachtet das “<”-Zeichen zwischen den Levels. Die Zahlen werden nicht in der korrekten Reihenfolge, sondern Alphabetisch geordnet. Die richtige Reihenfolge kann man mit levels = festlegen.\n\n\nzahlen <- factor(zahlen,ordered = T,levels = c(\"null\",\"eins\",\"zwei\",\"drei\",\"vier\"))\n\nzahlen\n\n\n[1] null eins zwei drei\nLevels: null < eins < zwei < drei < vier\n\nWie auch schon erwähnt werden factors als character Vektor dargestellt, aber als Integers gespeichert. Das führt zu einem scheinbaren Wiederspruch wenn man den Datentyp auf unterschiedliche Weise abfragt.\n\n\ntypeof(zahlen)\n\n\n[1] \"integer\"\n\nis.integer(zahlen)\n\n\n[1] FALSE\n\nMit typeof() wird eben diese Form der Speicherung abgefragt und deshalb mit integer beantwortet. Da es sich aber nicht um einen eigentlichen Integer Vektor handelt, wird die Frage is.integer() mit FALSE beantwortet. Das ist etwas verwirrend, beruht aber darauf, dass die beiden Funktionen die Frage von unterschiedlichen Perspektiven beantworten. In diesem Fall schafft class() Klarheit:\n\n\nclass(zahlen)\n\n\n[1] \"ordered\" \"factor\" \n\nWirklich verwirrend wird es, wenn factors in numeric umgewandelt werden sollen.\n\n\nzahlen\n\n\n[1] null eins zwei drei\nLevels: null < eins < zwei < drei < vier\n\nas.integer(zahlen)\n\n\n[1] 1 2 3 4\n\nDas die Übersetzung der auf Deutsch ausgeschriebenen Nummern in nummerische Zahlen nicht funktionieren würde, war ja klar. Weniger klar ist es jedoch, wenn die factors bereits aus nummerischen Zahlen bestehen.\n\n\nzahlen2 <- factor(c(\"10\",\"20\"))\nas.integer(zahlen2)\n\n\n[1] 1 2\n\nIn diesem Fall müssen die factors erstmals in character umgewandelt werden.\n\n\nas.integer(as.character(zahlen2))\n\n\n[1] 10 20\n\nZeit/Datum\nUm in R mit Datum/Zeit Datentypen umzugehen, müssen sie als POSIXct eingelesen werden (es gibt alternativ noch POSIXlt, aber diese ignorieren wir mal). Anders als Beispielsweise bei Excel, sollten in R Datum und Uhrzeit immer in einer Spalte gespeichert werden.\n\n\ndatum <- \"2017-10-01 13:45:10\"\n\nas.POSIXct(datum)\n\n\n[1] \"2017-10-01 13:45:10 CEST\"\n\nWenn das die Zeichenkette in dem obigen Format (Jahr-Monat-Tag Stunde:Minute:Sekunde) daher kommt, braucht as.POSIXctkeine weiteren Informationen. Sollte das Format von dem aber Abweichen, muss man der Funktion das genaue Schema jedoch mitteilen. Der Syntax dafür kann via ?strptime nachgeschlagen werden.\n\n\ndatum <- \"01.10.2017 13:45\"\n\nas.POSIXct(datum,format = \"%d.%m.%Y %H:%M\")\n\n\n[1] \"2017-10-01 13:45:00 CEST\"\n\ndatum <- as.POSIXct(datum,format = \"%d.%m.%Y %H:%M\")\n\n\n\nBeachtet, dass in den den obigen Beispiel R automatisch eine Zeitzone angenommen hat (CEST). R geht davon aus, dass die Zeitzone der System Timezone (Sys.timezone()) entspricht.\n\n\nstrftime(datum, format = \"%m\")\n\n\n[1] \"10\"\n\nstrftime(datum, format = \"%b\")\n\n\n[1] \"Okt\"\n\nstrftime(datum, format = \"%B\")\n\n\n[1] \"Oktober\"\n\nData Frames und Conveniance Variabeln\nEine data.frame ist die gängigste Art, Tabellarische Daten zu speichern.\n\n\ndf <- data.frame(\n  Stadt = c(\"Zürich\",\"Genf\",\"Basel\",\"Bern\",\"Lausanne\"),\n  Einwohner = c(396027,194565,175131,140634,135629),\n  Ankunft = c(\"1.1.2017 10:00\",\"1.1.2017 14:00\",\n              \"1.1.2017 13:00\",\"1.1.2017 18:00\",\"1.1.2017 21:00\")\n)\n\nstr(df)\n\n\n'data.frame':   5 obs. of  3 variables:\n $ Stadt    : chr  \"Zürich\" \"Genf\" \"Basel\" \"Bern\" ...\n $ Einwohner: num  396027 194565 175131 140634 135629\n $ Ankunft  : chr  \"1.1.2017 10:00\" \"1.1.2017 14:00\" \"1.1.2017 13:00\" \"1.1.2017 18:00\" ...\n\nIn der obigen data.frame wurde die Spalte Einwohner als Fliesskommazahl abgespeichert. Dies ist zwar nicht tragisch, aber da wir wissen das es sich hier sicher um Ganzzahlen handelt, können wir das korrigieren. Wichtiger ist aber, dass wir die Ankunftszeit (SpalteAnkunft) von einem Factor in ein Zeitformat (POSIXct) umwandeln.\n\n\ndf$Einwohner <- as.integer(df$Einwohner)\n\ndf$Einwohner\n\n\n[1] 396027 194565 175131 140634 135629\n\ndf$Ankunft <- as.POSIXct(df$Ankunft, format = \"%d.%m.%Y %H:%M\")\n\ndf$Ankunft\n\n\n[1] \"2017-01-01 10:00:00 CET\" \"2017-01-01 14:00:00 CET\"\n[3] \"2017-01-01 13:00:00 CET\" \"2017-01-01 18:00:00 CET\"\n[5] \"2017-01-01 21:00:00 CET\"\n\nDiese Rohdaten können nun helfen, um Hilfsvariablen (convenience variables) zu erstellen. Z.B. können wir die Städte einteilen in gross, mittel und klein.\n\n\ndf$Groesse[df$Einwohner > 300000] <- \"gross\"\ndf$Groesse[df$Einwohner <= 300000 & df$Einwohner > 150000] <- \"mittel\"\ndf$Groesse[df$Einwohner <= 150000] <- \"klein\"\n\n\n\nOder aber, die Ankunftszeit kann von der Spalte Ankunftabgeleitet werden. Dazu brauchen wir aber das Package lubridate\n\n\nlibrary(lubridate)\n\n\n\n\n\ndf$Ankunft_stunde <- hour(df$Ankunft)\n\n\n\n\n\n\n",
    "preview": "prepro/PrePro1_Demo_Datentypen/types.jpg",
    "last_modified": "2021-12-10T11:57:44+00:00",
    "input_file": {}
  },
  {
    "path": "prepro/PrePro1_Uebung/",
    "title": "Übung",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-10-26",
    "categories": [
      "PrePro1"
    ],
    "contents": "\n\nContents\nArbeiten mit RStudio “Project”\nArbeiten mit Libraries / Packages\nAufgabe 1\nAufgabe 2\nAufgabe 3\nAufgabe 4\nAufgabe 5\nAufgabe 6\nAufgabe 7\nAufgabe 8\nMusterlösung\n\nArbeiten mit RStudio “Project”\nWir empfehlen die Verwendung von “Projects” innerhalb von RStudio. RStudio legt für jedes Projekt dann einen Ordner an, in welches die Projekt-Datei abgelegt wird (Dateiendung .Rproj). Sollen innerhalb des Projekts dann R-Skripts geladen oder erzeugt werden, werden diese dann auch im angelegten Ordner abgelegt. Mehr zu RStudio Projects findet ihr hier.\nDas Verwenden von Projects bringt verschiedene Vorteile, wie zum Beispiel:\nFestlegen der Working Directory ohne die Verwendung des expliziten Pfades (setwd()). Das ist sinnvoll, da sich dieser Pfad ändern kann (Zusammenarbeit mit anderen Usern, Ausführung des Scripts zu einem späteren Zeitpunkt)\nAutomatisches Zwischenspeichern geöffneter Scripts und Wiederherstellung der geöffneten Scripts bei der nächsten Session\nFestlegen verschiedener projektspezifischer Optionen\nVerwendung von Versionsverwaltungssystemen (git oder SVN)\nArbeiten mit Libraries / Packages\nR ist ohne Zusatzpackete nicht mehr denkbar. Die allermeisten Packages werden auf CRAN gehostet und können leicht mittels install.packages() installiert werden. Eine sehr wichtige Sammlung von Packages wird von RStudio entwickelt. Unter dem Namen Tidyverse werden eine Reihe von Packages angeboten, den R-Alltag enorm erleichtert. Wir werden später näher auf das “Tidy”-Universum eingehen, an dieser Stelle können wir die Sammlung einfach mal die wichtigsten Packages aus tidyverse installieren (heute werden wir davon nur einen kleinen Teil benutzen).\ninstall.packages(\"dplyr\")\ninstall.packages(\"tidyr\")\ninstall.packages(\"readr\")\ninstall.packages(\"lubridate\")\nUm ein package in R verwenden zu können, gibt es zwei Möglichkeiten:\nentweder man lädt es zu Beginn der R-session mittles library(dplyr) (ohne Anführungs- und Schlusszeichen).\noder man ruft eine function mit vorangestelltem Packetname sowie zwei Doppelpunkten auf. dplyr::filter() ruft die Funktion filter() des Packets dplyr auf.\nLetztere Notation ist vor allem dann sinnvoll, wenn sich zwei unterschiedliche Funktionen mit dem gleichen namen in verschiedenen pacakges existieren. filter() existiert als Funktion einersits im package dplyr sowie in stats. Dieses Phänomen nennt man “masking”.\nZu Beginn laden wir die nötigen Pakete :\n\n\nlibrary(readr)\nlibrary(lubridate)\n\n# Im Unterschied zu install.packages() werden bei library()\n# keine Anführungs- und Schlusszeichen gesetzt.\n\n\n\ndplyr liefert viele Funktionen, für die es in der normalen R-Umgebung (“base R”) keine wirkliche Alternative gibt. Andere Funktionen sind alternativen zu Base-R Funktionen (read_csv statt read.csv, read_delim statt read.delim.\nDiese verhalten sich leicht anders als Base-R Funktionen: Sie treffen weniger Annahmen und sind etwas konservativer. Wir verwenden oft Tidyverse Funktionen, ihr könnt aber selber entscheiden welche Version ihr benutzt.\nAufgabe 1\nErstelle eine data.frame mit nachstehenden Daten.\nTipps:\nEine leere data.frame zu erstellen ist schwieriger als wenn erstellen und befüllen der data.frame in einem Schritt erfolgt\nR ist dafür gedacht, Spalte für Spalte zu arbeiten (warum?), nicht Reihe für Reihe. Versuche dich an dieses Schema zu halten.\n\n\n\n\nTierart\nAnzahl\nGewicht\nGeschlecht\nBeschreibung\nFuchs\n2\n4.4\nm\nRötlich\nBär\n5\n40.3\nf\nBraun, gross\nHase\n1\n1.1\nm\nklein, mit langen Ohren\nElch\n3\n120.0\nm\nLange Beine, Schaufelgeweih\n\nAufgabe 2\nWas für Datentypen wurden (in Aufgabe 1) von R automatisch angenommen? Sind diese sinnvoll?\n\n'data.frame':   4 obs. of  5 variables:\n $ Tierart     : chr  \"Fuchs\" \"Bär\" \"Hase\" \"Elch\"\n $ Anzahl      : num  2 5 1 3\n $ Gewicht     : num  4.4 40.3 1.1 120\n $ Geschlecht  : chr  \"m\" \"f\" \"m\" \"m\"\n $ Beschreibung: chr  \"Rötlich\" \"Braun, gross\" \"klein, mit langen Ohren\" \"Lange Beine, Schaufelgeweih\"\n[1] \"double\"\n\nAufgabe 3\nNutze die Spalte Gewicht um die Tiere in 3 Gewichtskategorien einzuteilen:\nleicht: < 5kg\nmittel: 5 - 100 kg\nschwer: > 100kg\n\n\n\nAufgabe 4\nImportiere den Datensatz weather.csv (Rechtsklick -> Speichern Unter, Quelle MeteoSchweiz). Es handelt sich dabei um die stündlich gemittelten Temperaturdaten an verschiedenen Standorten in der Schweiz. Wir empfehlen read_csv() anstelle von read.csv().\nAchtung! read_csv erwartet leicht andere inputs als read.csv, schaut euch die Hilfe dazu an (?read_csv).\n\n\n\n\n\n\n\nstn\ntime\ntre200h0\nABO\n2000010100\n-2.6\nABO\n2000010101\n-2.5\nABO\n2000010102\n-3.1\nABO\n2000010103\n-2.4\nABO\n2000010104\n-2.5\nABO\n2000010105\n-3.0\nABO\n2000010106\n-3.7\nABO\n2000010107\n-4.4\nABO\n2000010108\n-4.1\nABO\n2000010109\n-4.1\n\nAufgabe 5\nSchau dir die Rückmeldung von read_csv()an. Sind die Daten korrekt interpretiert worden?\n\n\n\nAufgabe 6\nDie Spalte time ist eine Datum/Zeitangabe im Format JJJJMMTTHH (siehe meta.txt). Damit R dies als Datum-/Zeitangabe erkennt, müssen wir die Spalte in einem R-Format (POSIXct) einlesen und dabei R mitteilen, wie sie aktuell formatiert ist. Lies die Spalte mit as.POSIXct() ein und spezifiziere sowohl format wie auch tz.\nTipps:\nWenn keine Zeitzone festgelegt wird, trifft as.POSIXct() eine Annahme (basierend auf Sys.timezone()). In unserem Fall handelt es sich aber um Werte in UTC (siehe metadata.csv)\nas.POSIXcterwartet character: Wenn du eine Fehlermeldung hast die 'origin' must be supplied (o.ä) heisst, hast du der Funktion vermutlich einen Numeric übergeben.\n\n\n\n\nTable 1: Die neue Tabelle sollte so aussehen\nstn\ntime\ntre200h0\nABO\n2000-01-01 00:00:00\n-2.6\nABO\n2000-01-01 01:00:00\n-2.5\nABO\n2000-01-01 02:00:00\n-3.1\nABO\n2000-01-01 03:00:00\n-2.4\nABO\n2000-01-01 04:00:00\n-2.5\nABO\n2000-01-01 05:00:00\n-3.0\nABO\n2000-01-01 06:00:00\n-3.7\nABO\n2000-01-01 07:00:00\n-4.4\nABO\n2000-01-01 08:00:00\n-4.1\nABO\n2000-01-01 09:00:00\n-4.1\n\nAufgabe 7\nErstelle zwei neue Spalten mit Wochentag (Montag, Dienstag, etc) und Kalenderwoche. Verwende dazu die neu erstellte POSIXct-Spalte\n\n\n\n\nstn\ntime\ntre200h0\nwochentag\nkw\nABO\n2000-01-01 00:00:00\n-2.6\nSa\n1\nABO\n2000-01-01 01:00:00\n-2.5\nSa\n1\nABO\n2000-01-01 02:00:00\n-3.1\nSa\n1\nABO\n2000-01-01 03:00:00\n-2.4\nSa\n1\nABO\n2000-01-01 04:00:00\n-2.5\nSa\n1\nABO\n2000-01-01 05:00:00\n-3.0\nSa\n1\nABO\n2000-01-01 06:00:00\n-3.7\nSa\n1\nABO\n2000-01-01 07:00:00\n-4.4\nSa\n1\nABO\n2000-01-01 08:00:00\n-4.1\nSa\n1\nABO\n2000-01-01 09:00:00\n-4.1\nSa\n1\n\nAufgabe 8\nErstelle eine neue Spalte basierend auf die Temperaturwerte mit der Einteilung “kalt” (unter Null Grad) und “warm” (über Null Grad)\n\n\n\n\nstn\ntime\ntre200h0\nwochentag\nkw\ntemp_kat\nABO\n2000-01-01 00:00:00\n-2.6\nSa\n1\nkalt\nABO\n2000-01-01 01:00:00\n-2.5\nSa\n1\nkalt\nABO\n2000-01-01 02:00:00\n-3.1\nSa\n1\nkalt\nABO\n2000-01-01 03:00:00\n-2.4\nSa\n1\nkalt\nABO\n2000-01-01 04:00:00\n-2.5\nSa\n1\nkalt\nABO\n2000-01-01 05:00:00\n-3.0\nSa\n1\nkalt\nABO\n2000-01-01 06:00:00\n-3.7\nSa\n1\nkalt\nABO\n2000-01-01 07:00:00\n-4.4\nSa\n1\nkalt\nABO\n2000-01-01 08:00:00\n-4.1\nSa\n1\nkalt\nABO\n2000-01-01 09:00:00\n-4.1\nSa\n1\nkalt\n\nMusterlösung\n\nR-Code\n\n\n\n\n",
    "preview": "prepro/PrePro1_Uebung/preview.png",
    "last_modified": "2021-12-10T11:57:44+00:00",
    "input_file": {},
    "preview_width": 1950,
    "preview_height": 1200
  },
  {
    "path": "prepro/PrePro2_Demo/",
    "title": "Demo",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-10-18",
    "categories": [
      "PrePro2"
    ],
    "contents": "\n\nContents\nPiping\nJoins\n\n\nR-Code\n\nPiping\nGegeben ist ein character string (diary). Wir wollen aus diesem Text die Temperaturangabe aus dem String extrahieren und danach den Wert von Kelvin in Celsius nach der folgenden Formel umwandeln und zum Schluss den Mittelwert über all diese Werte berechnen.\n\\[°C = K - 273.15\\]\n\n\ndiary <- c(\n  \"The temperature is 310° Kelvin\",\n  \"The temperature is 322° Kelvin\",\n  \"The temperature is 410° Kelvin\"\n)\n\ndiary\n\n\n[1] \"The temperature is 310° Kelvin\" \"The temperature is 322° Kelvin\"\n[3] \"The temperature is 410° Kelvin\"\n\nDafür haben wir eine Hilfsfunktion subtrahieren, welche zwei Werte annimmt, den minuend und den subtrahend:\n\n\nsubtrahieren <- function(minuend, subtrahend){\n  minuend - subtrahend\n}\n\n\n\nZudem brauchen wir die Funktion substr(), welche aus einem character einen teil “raus schnipseln” kann.\n\n\n# Wenn die Buchstaben einzelne _Elemente_ eines Vektors wären, würden wir diese\n# folgendermassen subsetten:\n\ncharvec1 <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")\ncharvec1[4:6]\n\n\n[1] \"d\" \"e\" \"f\"\n\n# Aber wenn diese in einem einzigen character gespeichert sind, brauchen wir substr:\ncharvec2 <- \"abcdefgh\"\nsubstr(charvec2, 4, 6)\n\n\n[1] \"def\"\n\nÜbersetzt in R-Code entsteht folgende Operation:\n\n\n# 1. Nimm diary\n# 2. Extrahiere auf jeder Zeile die Werte 20 bis 22\n# 3. Konvertiere \"character\" zu \"numeric\"\n# 4. Subtrahiere 273.15\n# 5. Berechne den Mittlwert\n\noutput <- mean(subtrahieren(as.numeric(substr(diary, 20, 22)),273.15))\n#                                             \\_1_/\n#                                      \\________2__________/\n#                           \\___________________3___________/\n#              \\________________________________4__________________/\n#         \\_____________________________________5____________________/\n\n\n\nDie ganze Operation liest sich etwas leichter, wenn diese sequentiell notiert wird:\n\n\ntemp <- substr(diary, 20, 22)       # 1, 2\ntemp <- as.numeric(temp)            # 3\ntemp <- subtrahieren(temp, 273.15)  # 4\noutput <- mean(temp)                # 5\n\n\n\nUmständlich ist dabei einfach, dass die Zwischenresultate immer abgespeichert und in der darauf folgenden Operation wieder abgerufen werden müssen. Hier kommt “piping” ins Spiel: Mit “piping” wird der Output der einen Funktion der erste Parameter der darauf folgenden Funktion.\n\n\nlibrary(magrittr)\n\ndiary %>%                            # 1\n  substr(20, 22) %>%                 # 2\n  as.numeric() %>%                   # 3 \n  subtrahieren(273.15) %>%           # 4\n  mean()                             # 5\n\n\n[1] 74.18333\n\nNoch ein Hinweis: die %>% Pipe Operation aus magrittr wurde in R so beliebt, dass in R 4.1 ein “base R pipe” eingeführt. Diese sieht folgendermassen aus:\n\n\ndiary |>                             # 1\n  substr(20, 22) |>                  # 2\n  as.numeric() |>                    # 3 \n  subtrahieren(273.15) |>            # 4\n  mean()                             # 5\n\n\n[1] 74.18333\n\nJoins\n\n\nstudierende <- data.frame(\n  Matrikel_Nr = c(100002, 100003, 200003),\n  Studi = c(\"Patrick\", \"Manuela\", \"Eva\"),\n  PLZ = c(8006, 8001, 8820)\n)\n\n \n\nstudierende\n\n\n  Matrikel_Nr   Studi  PLZ\n1      100002 Patrick 8006\n2      100003 Manuela 8001\n3      200003     Eva 8820\n\nortschaften <- data.frame(\n  PLZ = c(8003, 8006, 8810, 8820),\n  Ortsname = c(\"Zürich\", \"Zürich\", \"Horgen\", \"Wädenswil\")\n)\n\n \n\nortschaften\n\n\n   PLZ  Ortsname\n1 8003    Zürich\n2 8006    Zürich\n3 8810    Horgen\n4 8820 Wädenswil\n\nlibrary(dplyr)\n\ninner_join(studierende, ortschaften, by = \"PLZ\")\n\n\n  Matrikel_Nr   Studi  PLZ  Ortsname\n1      100002 Patrick 8006    Zürich\n2      200003     Eva 8820 Wädenswil\n\nleft_join(studierende, ortschaften, by = \"PLZ\")\n\n\n  Matrikel_Nr   Studi  PLZ  Ortsname\n1      100002 Patrick 8006    Zürich\n2      100003 Manuela 8001      <NA>\n3      200003     Eva 8820 Wädenswil\n\nright_join(studierende, ortschaften, by = \"PLZ\")\n\n\n  Matrikel_Nr   Studi  PLZ  Ortsname\n1      100002 Patrick 8006    Zürich\n2      200003     Eva 8820 Wädenswil\n3          NA    <NA> 8003    Zürich\n4          NA    <NA> 8810    Horgen\n\nfull_join(studierende, ortschaften, by = \"PLZ\")\n\n\n  Matrikel_Nr   Studi  PLZ  Ortsname\n1      100002 Patrick 8006    Zürich\n2      100003 Manuela 8001      <NA>\n3      200003     Eva 8820 Wädenswil\n4          NA    <NA> 8003    Zürich\n5          NA    <NA> 8810    Horgen\n\n\n\nstudierende <- data.frame(\n  Matrikel_Nr = c(100002, 100003, 200003),\n  Studi = c(\"Patrick\", \"Manuela\", \"Pascal\"),\n  Wohnort = c(8006, 8001, 8006)\n)\n \n\nleft_join(studierende, ortschaften, by = c(\"Wohnort\" = \"PLZ\"))\n\n\n  Matrikel_Nr   Studi Wohnort Ortsname\n1      100002 Patrick    8006   Zürich\n2      100003 Manuela    8001     <NA>\n3      200003  Pascal    8006   Zürich\n\n\n\n\n",
    "preview": "prepro/PrePro2_Demo/pipe.jpg",
    "last_modified": "2021-12-10T11:57:44+00:00",
    "input_file": {}
  },
  {
    "path": "prepro/PrePro2_Uebung_A/",
    "title": "Übung A",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-10-26",
    "categories": [
      "PrePro2"
    ],
    "contents": "\n\nContents\nAufgabe 1\nAufgabe 2\nAufgabe 3\nAufgabe 4\nAufgabe 5\nAufgabe 6\nAufgabe 7\nMusterlösung\n\nFür die Musterlösungen werden wir die nachstehenden Libraries verwenden:\nAufgabe 1\nLade die Wetterdaten von letzer Woche runter (weather.csv, Quelle MeteoSchweiz) und importiere sie in R. Sorge dafür, dass die Spalten korrekt formatiert sind (stn als factor, time als POSIXct, tre200h0 als numeric.)\nAufgabe 2\nLade metadata herunter und lade es ebenfalls als csv ein.\nHinweis: Wenn Umlaute und Sonderzeichen nicht korrekt dargestellt werden (z.B. in Genève), hat das vermutlich mit der Zeichencodierung zu tun. Das File ist aktuell in ‘ANSI’ Codiert, welche für gewisse Betriebssysteme / R-Versionen ein Problem darstellt. Um das Problem zu umgehen muss man das File mit einem Editor öffnen (Windows ‘Editor’ oder ‘Notepad++’, Mac: ‘TextEdit’) und mit einer neuen Codierung (z.B ‘UTF-8’) abspeichern. Danach kann die Codierung spezifitiert werden (bei read_delim(): mitlocale = locale(encoding = “UTF-8”)`)\nAufgabe 3\nDie x-/y-Koordinaten sind aktuell in einer Spalte erfasst. Um mit den Koordinaten sinnvoll arbeiten zu können, brauchen wir die Koordinaten getrennt. Trenne die x und y Koordinaten aus der Spalte Koordinaten.\nSchritt: verwende stringr::str_split_fixed um die Spalte in eine matrix zu überführen\nSchritt: benenne die Spalten der matrix in x und y um\nSchritt: nutze cbind um die matrix mit der data.frame zu verbinden\nAufgabe 4\nNun wollen wir den Datensatz wettermit den Informationen aus metadata anreichern. Uns interessiert aber nur das Stationskürzel, der Name, die x/y Koordinaten sowie die Meereshöhe. Lösche die nicht benötigten Spalten (oder selektiere die benötigten Spalten).\nAufgabe 5\nNun ist der Datensatz metadata genügend vorbereitet. Jetzt kann er mit dem Datensatz wetter verbunden werden. Überlege dir, welcher Join dafür sinnvoll ist und mit welchem Attribut wir “joinen” können.\nNutze die Join-Möglichkeiten von dplyr (Hilfe via ?dplyr::join) um die Datensätze wetter und metadata zu verbinden.\nAufgabe 6\nErstelle eine neue Spalte month welche den jeweiligen Monat (aus time) beinhaltet. Nutze dafür die Funktion lubridate::month().\nAufgabe 7\nBerechne mit der Spalte month die Durchschnittstemperatur pro Monat.\nMusterlösung\n\nR-Code\n\n\n\n\n",
    "preview": "prepro/PrePro2_Uebung_A/weather.jpg",
    "last_modified": "2021-12-10T11:57:44+00:00",
    "input_file": {}
  },
  {
    "path": "prepro/PrePro2_Uebung_B/",
    "title": "Übung B",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-10-19",
    "categories": [
      "PrePro2"
    ],
    "contents": "\n\nContents\nAufgabe 1\nAufgabe 2\nAufgabe 3\nAufgabe 4\nMusterlösung\n\n\n\n\nAufgabe 1\nGegeben sind die Daten von drei Sensoren (sensor1.csv, sensor2.csv, sensor3.csv). Lade die Datensätze runter und lese sie ein.\n\n\n\n\n\n\nAufgabe 2\nErstelle aus den 3 Dataframes eine einzige Dataframe, die aussieht wie unten dargestellt. Nutze dafür zwei joins aus dplyr um 3 data.frames miteinander zu verbinden. Bereinige im Anschluss die Spaltennamen (wie geht das?).\n\n\n\n\nDatetime\nsensor1\nsensor2\nsensor3\n16102017_1800\n23.5\n13.5\n26.5\n17102017_1800\n25.4\n24.4\n24.4\n18102017_1800\n12.4\n22.4\n13.4\n19102017_1800\n5.4\n12.4\n7.4\n23102017_1800\n23.5\n13.5\nNA\n24102017_1800\n21.3\n11.3\nNA\n\nAufgabe 3\nImportiere die Datei sensor_1_fail.csv in R.\n\n\n\nsensor_fail.csv hat eine Variabel SensorStatus: 1 bedeutet der Sensor misst, 0 bedeutet der Sensor miss nicht. Fälschlicherweise wurde auch dann der Messwert Temp = 0 erfasst, wenn Sensorstatus = 0. Richtig wäre hier NA (not available). Korrigiere den Datensatz entsprechend.\n\nSensor\nTemp\nHumidity\nDatetime\nSensorStatus\nSen102\n0.6\n98\n16102017_1800\n1\nSen102\n0.3\n96\n17102017_1800\n1\nSen102\n0.0\n87\n18102017_1800\n1\nSen102\n0.0\n86\n19102017_1800\n0\nSen102\n0.0\n98\n23102017_1800\n0\nSen102\n0.0\n98\n24102017_1800\n0\nSen102\n0.0\n96\n25102017_1800\n1\nSen103\n-0.3\n87\n26102017_1800\n1\nSen103\n-0.7\n98\n27102017_1800\n1\nSen103\n-1.2\n98\n28102017_1800\n1\n\n\n\n\nAufgabe 4\nWarum spielt das es eine Rolle, ob 0 oder NA erfasst wird? Berechne die Mittlere der Temperatur / Feuchtigkeit nach der Korrektur.\n\n\n\nMusterlösung\n\nR-Code\n\n\n\n\n",
    "preview": "prepro/PrePro2_Uebung_B/sensor.jpg",
    "last_modified": "2021-12-10T11:57:44+00:00",
    "input_file": {}
  },
  {
    "path": "prepro/PrePro3_Demo_Split-Apply-Combine/",
    "title": "Demo PrePro 3",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-10-19",
    "categories": [
      "PrePro3"
    ],
    "contents": "\n\nContents\nSplit-Apply-Combine (Beispiel 1)\nSplit-Apply-Combine (Beispiel 2)\nSplit-Apply-Combine (Beispiel 3)\nDaten Laden\nKennwerte berechnen\nConvenience Variablen\nKennwerte nach Gruppen berechnen\nVerketten vs. verschachteln\n\nReshaping data\nBreit -> lang\nLang -> breit\n\n\n\nR-Code\n\nIn dieser DEMO möchten wir weitere Werkzeuge aus dem Tidyverse vorstellen und mit Beispielen illustrieren. Die tidyverse-Tools erleichtern den Umgang mit Daten ungeheuer und haben sich mittlerweile zu einem “must have” im Umgang mit Daten in R entwickelt.\nWir können Euch nicht sämtliche Möglichkeiten von tidyverse zeigen. Wir fokussieren uns deshalb auf weitere wichtige Komponenten 1 und zeigen zusätzliche Funktionalitäten, die wir oft verwenden und Euch ggf. noch nicht bekannt sind. Wer sich vertieft mit dem Thema auseinandersetzen möchte, der sollte sich unbedingt das Buch Wickham and Grolemund (2017) beschaffen. Eine umfangreiche, aber nicht ganz vollständige Version gibt es online1 , das vollständige eBook kann über die Bibliothek bezogen werden2.\nWir benötigen dazu folgende Packages:\n\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(ggplot2)\n\n\n\nSplit-Apply-Combine (Beispiel 1)\n\n\ndf <- data.frame(\n  key = c(\"A\",\"B\",\"C\",\"A\",\"B\",\"C\",\"A\",\"B\",\"C\"),\n  data = c(0, 5, 10, 5, 10, 15, 10, 15, 20)\n)\n\n\ndf \n\n\n  key data\n1   A    0\n2   B    5\n3   C   10\n4   A    5\n5   B   10\n6   C   15\n7   A   10\n8   B   15\n9   C   20\n\nsry <- df %>%\n  group_by(key) %>%\n  summarise(Summe = sum(data))\n\n \nsry <- df %>%\n  group_by(key) %>%\n  summarise(\n    Summe = sum(data),\n    Minimum = min(data),\n    Maximun = max(data)\n    )\n\n\n\nSplit-Apply-Combine (Beispiel 2)\n\n\n?mtcars\n\n\n\n\n\nmtcars <- mtcars                          # Einlesen des Beispielsdatensatzes mtcars\nby_cyl <- group_by(mtcars, cyl)           # Gruppieren nach Anzahl Zylinder (cyl)\nsummarise(by_cyl,mean_mpg = mean(mpg))    # Berechnen des Mittelwerts pro \n\n\n# A tibble: 3 × 2\n    cyl mean_mpg\n  <dbl>    <dbl>\n1     4     26.7\n2     6     19.7\n3     8     15.1\n\n                                          # Zylinder-Gruppe, resp. Kategorie\n\nby_cyl_2 <- group_by(mtcars,cyl,am)       # Gruppieren nach Anzahl Zylinder (cyl) \n                                          # UND Schaltung automatisch oder manuell (am)\n\nsummarise(by_cyl_2,mean_mpg = mean(mpg))\n\n\n# A tibble: 6 × 3\n# Groups:   cyl [3]\n    cyl    am mean_mpg\n  <dbl> <dbl>    <dbl>\n1     4     0     22.9\n2     4     1     28.1\n3     6     0     19.1\n4     6     1     20.6\n5     8     0     15.0\n6     8     1     15.4\n\nSplit-Apply-Combine (Beispiel 3)\nDaten Laden\nWir laden die Wetterdaten von der letzten Übung.\n\n\n\n\n\nwetter <- read_csv(\"weather.csv\",\n                  col_types = list(\n                    col_factor(levels = NULL),    \n                    col_datetime(format = \"%Y%m%d%H\"),\n                    col_double()\n                    )\n                  )\n\n\n\nKennwerte berechnen\nWir möchten den Mittelwert aller gemessenen Temperaturwerte berechnen. Dazu könnten wir folgenden Befehl verwenden:\n\n\nmean(wetter$tre200h0, na.rm = TRUE) \n\n\n[1] 6.324744\n\nDie Option na.rm = T bedeutet, dass NA Werte von der Berechnung ausgeschlossen werden sollen.\nMit der selben Herangehensweise können diverse Werte berechnet werden (z.B. das Maximum (max()), Minimum (min()), Median (median()) u.v.m.).\nDiese Herangehensweise funktioniert nur dann gut, wenn wir die Kennwerte über alle Beobachtungen für eine Variable (Spalte) berechnen wollen. Sobald wir die Beobachtungen gruppieren wollen, wird es schwierig. Zum Beispiel, wenn wir die durchschnittliche Temperatur pro Monat berechnen wollen.\nConvenience Variablen\nUm diese Aufgabe zu lösen, muss zuerst den Monat extrahiert werden (der Monat ist die convenience variabel). Hierfür brauchen wir die Funktion lubridate::month().\nNun kann kann die convenience Variable “Month” erstellt werden. Ohne dpylr wird eine neue Spalte folgendermassen hinzugefügt.\n\n\nwetter$month <- month(wetter$time)\n\n\n\nMit dplyr (siehe)3 sieht der gleiche Befehl folgendermassen aus:\n\n\nwetter <- mutate(wetter,month = month(time))\n\n\n\nDer grosse Vorteil von dplyr ist an dieser Stelle noch nicht ersichtlich. Dieser wird aber später klar.\nKennwerte nach Gruppen berechnen\nUm mit base R den Mittelwert pro Monat zu berechnen, kann man zuerst ein Subset mit [] erstellen und davon den Mittelwerb berechnen, z.B. folgendermassen:\n\n\nmean(wetter$tre200h0[wetter$month == 1], na.rm = TRUE)\n\n\n[1] -1.963239\n\nDies müssen wir pro Monat wiederholen, was natürlich sehr umständlich ist. Deshalb nutzen wir das package dplyr. Damit geht die Aufgabe (Temperaturmittel pro Monat berechnen) folgendermassen:\n\n\nsummarise(group_by(wetter,month),temp_mittel = mean(tre200h0, na.rm = TRUE))\n\n\n# A tibble: 12 × 2\n   month temp_mittel\n   <dbl>       <dbl>\n 1     1      -1.96 \n 2     2       0.355\n 3     3       2.97 \n 4     4       4.20 \n 5     5      11.0  \n 6     6      12.4  \n 7     7      13.0  \n 8     8      15.0  \n 9     9       9.49 \n10    10       8.79 \n11    11       1.21 \n12    12      -0.898\n\nVerketten vs. verschachteln\nAuf Deutsch übersetzt heisst die obige Operation folgendermassen:\nnimm den Datensatz wetter\nBilde Gruppen pro Jahr (group_by(wetter,year))\nBerechne das Temperaturmittel (mean(tre200h0))\nDiese Übersetzung R-> Deutsch unterscheidet sich vor allem darin, dass die Operation auf Deutsch verkettet ausgesprochen wird (Operation 1->2->3) während der Computer verschachtelt liest 3(2(1)). Um R näher an die gesprochene Sprache zu bringen, kann man den %>%-Operator verwenden (siehe).4\n\n\n# 1 nimm den Datensatz \"wetter\"\n# 2 Bilde Gruppen pro Monat\n# 3 berechne das Temperaturmittel \n\nsummarise(group_by(wetter,month),temp_mittel = mean(tre200h0))\n#                  \\_1_/\n#         \\__________2_________/\n#\\___________________3_______________________________________/\n\n# wird zu:\n\nwetter %>%                                 # 1\n  group_by(month) %>%                      # 2\n  summarise(temp_mittel = mean(tre200h0))  # 3\n\n\n\nDieses Verketten mittels %>% (genannt “pipe”) macht den Code einiges schreib- und leserfreundlicher, und wir werden ihn in den nachfolgenden Übungen verwenden. Die “pipe” wird mit dem package magrittr bereitgestellt und mit dplyr mitinstalliert.\nZu dplyr gibt es etliche Tutorials online (siehe5), deshalb werden wir diese Tools nicht in allen Details erläutern. Nur noch folgenden wichtigen Unterschied zu zwei wichtigen Funktionen in dpylr: mutate() und summarise().\nsummarise() fasst einen Datensatz zusammen. Dabei reduziert sich die Anzahl Beobachtungen (Zeilen) auf die Anzahl Gruppen (z.B. eine zusammengefasste Beobachtung (Zeile) pro Jahr). Zudem reduziert sich die Anzahl Variablen (Spalten) auf diejenigen, die in der “summarise” Funktion spezifiziert wurde (z.B. temp_mittel).\nmit mutate wird ein data.frame vom Umfang her belassen, es werden lediglich zusätzliche Variablen (Spalten) hinzugefügt (siehe Beispiel unten).\n\n\n# Maximal und minimal Temperatur pro Kalenderwoche\nweather_summary <- wetter %>%               #1) nimm den Datensatz \"wetter\"\n  filter(month == 1) %>%                    #2) filter auf den Monat Januar\n  mutate(day = day(time)) %>%               #3) erstelle eine neue Spalte \"day\"\n  group_by(day) %>%                         #4) Nutze die neue Spalte um Gruppen zu bilden\n  summarise(\n    temp_max = max(tre200h0, na.rm = TRUE), #5) Berechne das Maximum \n    temp_min = min(tre200h0, na.rm = TRUE)  #6) Berechne das Minimum\n    )   \n\nweather_summary\n\n\n# A tibble: 31 × 3\n     day temp_max temp_min\n   <int>    <dbl>    <dbl>\n 1     1      5.8     -4.4\n 2     2      2.8     -4.3\n 3     3      4.2     -3.1\n 4     4      4.7     -2.8\n 5     5     11.4     -0.6\n 6     6      6.7     -1.6\n 7     7      2.9     -2.8\n 8     8      0.2     -3.6\n 9     9      2.1     -8.8\n10    10      1.6     -2.4\n# … with 21 more rows\n\nReshaping data\nBreit -> lang\nDie Umformung von Tabellen breit->lang erfolgt mittels tidyr(siehe).6 Auch dieses package funktioniert wunderbar mit piping (%>%).\n\n\nweather_summary %>%\n  pivot_longer(c(temp_max,temp_min))\n\n\n# A tibble: 62 × 3\n     day name     value\n   <int> <chr>    <dbl>\n 1     1 temp_max   5.8\n 2     1 temp_min  -4.4\n 3     2 temp_max   2.8\n 4     2 temp_min  -4.3\n 5     3 temp_max   4.2\n 6     3 temp_min  -3.1\n 7     4 temp_max   4.7\n 8     4 temp_min  -2.8\n 9     5 temp_max  11.4\n10     5 temp_min  -0.6\n# … with 52 more rows\n\nIm Befehl pivot_longer() müssen wir festlegen, welche Spalten zusammengefasst werden sollen (hier: temp_max,temp_min,temp_mean). Alternativ können wir angeben, welche Spalten wir nicht zusammenfassen wollen:\n\n\nweather_summary %>%\n  pivot_longer(-day)\n\n\n# A tibble: 62 × 3\n     day name     value\n   <int> <chr>    <dbl>\n 1     1 temp_max   5.8\n 2     1 temp_min  -4.4\n 3     2 temp_max   2.8\n 4     2 temp_min  -4.3\n 5     3 temp_max   4.2\n 6     3 temp_min  -3.1\n 7     4 temp_max   4.7\n 8     4 temp_min  -2.8\n 9     5 temp_max  11.4\n10     5 temp_min  -0.6\n# … with 52 more rows\n\nWenn wir die Namen neuen Spalten festlegen wollen (anstelle von name und value) erreichen wir dies mit names_to bzw. values_to:\n\n\nweather_summary_long <- weather_summary %>%\n  pivot_longer(-day, names_to = \"Messtyp\", values_to = \"Messwert\")\n\n\n\nDie ersten 6 Zeilen von weather_summary_long:\n\nday\nMesstyp\nMesswert\n1\ntemp_max\n5.8\n1\ntemp_min\n-4.4\n2\ntemp_max\n2.8\n2\ntemp_min\n-4.3\n3\ntemp_max\n4.2\n3\ntemp_min\n-3.1\n\nDie ersten 6 Zeilen von wetter_sry:\n\nday\ntemp_max\ntemp_min\n1\n5.8\n-4.4\n2\n2.8\n-4.3\n3\n4.2\n-3.1\n4\n4.7\n-2.8\n5\n11.4\n-0.6\n6\n6.7\n-1.6\n\nBeachte: weather_summary_long umfasst 62 Beobachtungen (Zeilen), das sind doppelt soviel wie weather_summary, da wir ja zwei Spalten zusammengefasst haben.\n\n\nnrow(weather_summary)\n\n\n[1] 31\n\nnrow(weather_summary_long)\n\n\n[1] 62\n\nLange Tabellen sind in verschiedenen Situationen praktischer. Beispielsweise ist das Visualisieren mittels ggplot2 (dieses Package werdet ihr im Block “InfoVis” kennenlernen) mit long tables wesentlich einfacher.\n\n\nggplot(weather_summary_long, aes(day,Messwert, colour = Messtyp)) +\n  geom_line()\n\n\n\n\nLang -> breit\nDas Gegenstück zu pivot_longer ist pivot_wider. Mit dieser Funktion können wir eine lange Tabelle in eine breite überführen. Dazu müssen wir in names_from angeben, aus welcher Spalte die neuen Spaltennamen erstellt werden sollen (names_from) und aus welcher Spalte die Werte entstammen sollen (values_from):\n\n\nweather_summary_long %>%\n  pivot_wider(names_from = Messtyp, values_from = Messwert)\n\n\n# A tibble: 31 × 3\n     day temp_max temp_min\n   <int>    <dbl>    <dbl>\n 1     1      5.8     -4.4\n 2     2      2.8     -4.3\n 3     3      4.2     -3.1\n 4     4      4.7     -2.8\n 5     5     11.4     -0.6\n 6     6      6.7     -1.6\n 7     7      2.9     -2.8\n 8     8      0.2     -3.6\n 9     9      2.1     -8.8\n10    10      1.6     -2.4\n# … with 21 more rows\n\nZum Vergleich: mit einer wide table müssen wir in ggplot2 jede Spalte einzeln plotten. Dies ist bei wenigen Variabeln wie hier noch nicht problematisch, aber bei einer hohen Anzahl wir dies schnell mühsam.\n\n\nggplot(weather_summary) +\n  geom_line(aes(day, temp_max)) +\n  geom_line(aes(day, temp_min))\n\n\n\n\n\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data Science. O’Reilly. https://ebookcentral.proquest.com/lib/zhaw/detail.action?docID=4770093.\n\n\nhttp://r4ds.had.co.nz/↩︎\nhttps://ebookcentral.proquest.com/lib/zhaw/detail.action?docID=4770093↩︎\nWickham and Grolemund (2017), Kapitel 10 / http://r4ds.had.co.nz/transform.html↩︎\nWickham and Grolemund (2017), Kapitel 14 / http://r4ds.had.co.nz/pipes.html↩︎\nWickham and Grolemund (2017), Kapitel 10 / http://r4ds.had.co.nz/transform.html, oder Hands-on dplyr tutorial..↩︎\nhttps://r4ds.had.co.nz/tidy-data.html#pivoting↩︎\n",
    "preview": "prepro/PrePro3_Demo_Split-Apply-Combine/distill-preview.png",
    "last_modified": "2021-12-10T11:57:44+00:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "prepro/PrePro3_Uebung/",
    "title": "Übung Prepro 3",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-10-21",
    "categories": [
      "PrePro3"
    ],
    "contents": "\n\nContents\nAufgabe 1\nAufgabe 2\nAufgabe 3\nAufgabe 4\nAufgabe 5\nAufgabe 6\nAufgabe 7\nAufgabe 8\nMusterlösung\n\nAufgabe 1\nGegeben sei ein Datensatz “sensors_combined.csv”, mit den Temperaturwerten von drei verschiedenen Sensoren. Lade diesen Datensatz herunter, importiere ihn als csv in R (als sensors_combined).\nFormatiere die Datetime Spalte in POSIXct um. Verwende dazu die Funktion as.POSIXct (lies mit ?strftime() nochmal nach wie du das spezfische Format (die “Schablone”) festlegen kannst.\n\n\n\n\n\n\nAufgabe 2\nÜberführe die Tabelle in ein langes Format (verwende dazu die Funktion pivot_longer aus tidyr) und speichere den output als sensors_long.\nTipp:\nim Argument cols kannst du entweder die Spalten auflisten, die “pivotiert” werden sollen.\nAlternativ kannst du (mit vorangestelltem Minuszeichen, -) die Spalte, bezeichnen, die nicht pivotiert werden soll.\nIn beiden Fällen musst du die Spalten weder mit Anführungs- und Schlusszeichen noch mit dem $-Zeichen versehen.\n\n\n\nAufgabe 3\nGruppiere sensors_long nach der neuen Spalte wo die Sensor-Information enthalten ist (default: name) mit group_by und berechne die mittlere Temperatur pro Sensor (summarise). Hinweis: Beide Funktionen sind Teil des Packages dplyr.\nDer Output sieht folgendermassen aus:\n\n# A tibble: 3 × 2\n  name    temp_mean\n  <chr>       <dbl>\n1 sensor1      14.7\n2 sensor2      12.0\n3 sensor3      14.4\n\nAufgabe 4\nErstelle für sensors_long eine neue convenience Variabel month welche den Monat beinhaltet (Tipp: verwende dazu die Funktion month aus lubridate). Gruppiere nun nach month und Sensor und berechne die mittlere Temperatur.\n\n# A tibble: 6 × 3\n# Groups:   month [2]\n  month name    temp_mean\n  <dbl> <chr>       <dbl>\n1    10 sensor1     14.7 \n2    10 sensor2     12.7 \n3    10 sensor3     14.4 \n4    11 sensor1    NaN   \n5    11 sensor2      8.87\n6    11 sensor3    NaN   \n\nAufgabe 5\nLade jetzt nochmal den Datensatz wetter.csv herunter und importiere ihn als CSV mit den Korrekten Spaltentypen (stn als factor, time als POSIXct, tre200h0 als double).\n\n\n\n\n\n\nAufgabe 6\nErstelle nun eine convenience Variabel für die Kalenderwoche pro Messung (lubridate::isoweek). Berechne im Anschluss den mittleren Temperaturwert pro Kalenderwoche.\n\n\n\nVisualisiere im Anschluss das Resultat:\n\n\nplot(weather_summary$week, weather_summary$temp_mean, type = \"l\")\n\n\n\n\nAufgabe 7\nIn der vorherigen Aufgabe haben wir die mittlere Temperatur pro Kalenderwoche über alle Jahre (2000 und 2001) berechnet. Wenn wir die Jahre aber miteinander vergleichen wollen, müssen wir das Jahr als zusätzliche convenience Variabel erstellen und danach gruppieren. Versuche dies mit den Wetterdaten und visualisiere den Output anschliessend.\n\n\n\n\n\n\nFigure 1: baseplot mag keine long tables und macht aus den beiden Jahren eine kontinuierliche Linie\n\n\n\nAufgabe 8\nÜberführe den Output aus der letzten Übung in eine wide table. Nun lassen sich die beiden Jahre viel besser miteinander vergleichen.\n\n\n\n\n\nplot(weather_summary2$week, weather_summary2$year2000, type = \"l\",col = \"blue\")\nlines(weather_summary2$week, weather_summary2$year2001, type = \"l\",col = \"red\")\n\n\n\n\nMusterlösung\n\nR-Code\n\n\n\n\n",
    "preview": "prepro/PrePro3_Uebung/distill-preview.png",
    "last_modified": "2021-12-10T11:57:44+00:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  }
]
